# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import lab2_pb2 as lab2__pb2


class groundControlStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getMap = channel.unary_unary(
                '/groundControl/getMap',
                request_serializer=lab2__pb2.filename.SerializeToString,
                response_deserializer=lab2__pb2.MapArray.FromString,
                )


class groundControlServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getMap(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_groundControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getMap': grpc.unary_unary_rpc_method_handler(
                    servicer.getMap,
                    request_deserializer=lab2__pb2.filename.FromString,
                    response_serializer=lab2__pb2.MapArray.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'groundControl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class groundControl(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getMap(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/groundControl/getMap',
            lab2__pb2.filename.SerializeToString,
            lab2__pb2.MapArray.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CommandServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getCommand = channel.unary_unary(
                '/CommandService/getCommand',
                request_serializer=lab2__pb2.botID.SerializeToString,
                response_deserializer=lab2__pb2.moveString.FromString,
                )


class CommandServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getCommand(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CommandServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getCommand': grpc.unary_unary_rpc_method_handler(
                    servicer.getCommand,
                    request_deserializer=lab2__pb2.botID.FromString,
                    response_serializer=lab2__pb2.moveString.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CommandService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CommandService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getCommand(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CommandService/getCommand',
            lab2__pb2.botID.SerializeToString,
            lab2__pb2.moveString.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MineSerialServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.getMineSerial = channel.unary_unary(
                '/MineSerialService/getMineSerial',
                request_serializer=lab2__pb2.mineRand.SerializeToString,
                response_deserializer=lab2__pb2.mineSerialInt.FromString,
                )


class MineSerialServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def getMineSerial(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MineSerialServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'getMineSerial': grpc.unary_unary_rpc_method_handler(
                    servicer.getMineSerial,
                    request_deserializer=lab2__pb2.mineRand.FromString,
                    response_serializer=lab2__pb2.mineSerialInt.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MineSerialService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MineSerialService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def getMineSerial(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MineSerialService/getMineSerial',
            lab2__pb2.mineRand.SerializeToString,
            lab2__pb2.mineSerialInt.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class commandCompletionNotificationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.notifyServer = channel.unary_unary(
                '/commandCompletionNotification/notifyServer',
                request_serializer=lab2__pb2.notify.SerializeToString,
                response_deserializer=lab2__pb2.confirmation.FromString,
                )


class commandCompletionNotificationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def notifyServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_commandCompletionNotificationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'notifyServer': grpc.unary_unary_rpc_method_handler(
                    servicer.notifyServer,
                    request_deserializer=lab2__pb2.notify.FromString,
                    response_serializer=lab2__pb2.confirmation.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'commandCompletionNotification', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class commandCompletionNotification(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def notifyServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/commandCompletionNotification/notifyServer',
            lab2__pb2.notify.SerializeToString,
            lab2__pb2.confirmation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class incomingMinePinStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.shareMinePin = channel.unary_unary(
                '/incomingMinePin/shareMinePin',
                request_serializer=lab2__pb2.minePin.SerializeToString,
                response_deserializer=lab2__pb2.confirmation.FromString,
                )


class incomingMinePinServicer(object):
    """Missing associated documentation comment in .proto file."""

    def shareMinePin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_incomingMinePinServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'shareMinePin': grpc.unary_unary_rpc_method_handler(
                    servicer.shareMinePin,
                    request_deserializer=lab2__pb2.minePin.FromString,
                    response_serializer=lab2__pb2.confirmation.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'incomingMinePin', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class incomingMinePin(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def shareMinePin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/incomingMinePin/shareMinePin',
            lab2__pb2.minePin.SerializeToString,
            lab2__pb2.confirmation.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
